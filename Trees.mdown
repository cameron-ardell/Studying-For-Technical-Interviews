# Trees

### A tree is made up of a root node and it has child nodes, who have child nodes themselves, and so on.

An **__n-ary tree__** is a roote tree with no more than **__n__** children.

A **__binary tree__** means that each node has 0 to 2 children, or a left and right node (one or both can be null).

A **__binary search tree__** is a tree that fufills a very specific ordering property: on any subtree, the left nodes are less than the root node which is less than all of the right nodes.

- Efficiency
    - Space
        - Average: O(n)
        - Worst: O(n)
    - Search
        - Average: O(log n)
        - Worst: O(n)
    - Insert
        - Average: O(log n)
        - Worst: O(n)
    - Delete
        - Average: O(log n)
        - Worst: O(n)


A binary tree is **balanced** if for each node it holds that the number of inner nodes in the left subtree and the number of inner nodes in the right subtree differ by at most 1. A binary tree is **balanced** if for any two leaves the difference of the depth is at most 1.

A **__full__** binary tree is one where each node has either 0 or 2 children.

A **__complete__** binary tree is one where every level is filled, except maybe last level, which is filled left to right.

A **__perfect__** binary tree is one where it is full and complete. All leaf nodes will be at the same level and this level will have the maximum number of nodes. [These are rare in interviews]

##### Balanced
Insert: O(log(N))

Find: O(log(N))

##### Unbalanced
Insert: O(N)

Find: O(N)


### Traversing
\_\_B\_\_  
A\.\.\.\.\.C

**Inorder**: left then root the right (A,B,C)
```java
void inOrder(TreeNode node){
	if(node != null){
		inOrder(node.left);
		visit(node);
		inOrder(node.right);
	}
}
```

**Preorder**: root then left then right (B,A,C)
```java
void preOrder(TreeNode node){
	if(node != null){
		visit(node);
		preOrder(node.left);
		preOrder(node.right);
	}
}
```

**Postorder**: left then right then root (A,C,B)
```java
void postOrder(TreeNode node){
	if(node != null){
		postOrder(node.left);
		ppstOrder(node.right);
		visit(node);
	}
}
```


We typically see inorder traveresals.


## Implementation

```java
class Node {
	Node left, right;
	int data;
	pubic Node(int data) {
		this.data = datal
	}

	public void insert(int value){
		if (value <= data) {
			if (left == null) {
				left = new Node(data);
			} else {
				left.insert(value);
		} else {
			if (right == null) {
				right = new Node(data);
			} else {
				right.insert(value);
			}
			}
		}
	}

	public boolean contains(int value) {
		if (value == data) {
			return true;
		} else if (value < data) {
			if (left == null){
				return false;
			} else {
				return left.contains(value);
			}
		} else {
			if (right == null) {
				return false;
			} else {
				return right.contains(value);
			}
		}
	}

	public void printInOrder() {
		if (left != null) {
			left.printInOrder();
		}
		System.out.println(data);
		if (right != null){
			right.printInOrder();
		}
	}
}
```

## Tries (prefix trees)
A trie is a variant of an n-ary tree in which characters are stored at each node. Each path down the tree may represent a word. The * nodes are used to indicate complete words. A node in a trie can have anywhere from 1 through (ALPHABET_SIZE + 1) children.  This can be used for quick look ups for prefixes in O(k) time, where k is the length of the prefix.

### Implementation
```java
public class Solution {
	public static class Node {
		private static int NUMBER_OF_CHARACTERS = 26;
		Node[] children = new Node[NUMBER_OF_CHARACTERS];
		int size = 0;

		private static int getCharIndex(char c){
			return c - 'a';
		}

		private Node getNode(char c) {
			return children[getCharIndex(c)];
		}

		private void setNode(char c, Node node) {
			children[getCharIndex(c)] = node;
		}

		public void add(String s){
			add(s, 0);
		}

		private void add(String s, int index) {
			size++;
			if(index == s.length()) return;
			char cur = s.charAt(index);
			int charCode = getCharIndex(cur);

			Node child = getNode(cur);
			if(child == null){
				child = new Node();
				setNode(cur, child);
			}
			child.add(s, index + 1);
		}

		public int findCount(String s, int index) {
			if (index == s.length()){
				return size;
			}
			Node child = getNode(s.charAt(index));
			if(child == null){
				return 0;
			}
			return child.findCount(s, index + 1);
		}
	}

	public static void main(String[] args){...}
}
```

## AVL Trees

![alt text](https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/AVL-tree-wBalance_K.svg/320px-AVL-tree-wBalance_K.svg.png "AVL Tree Example")
_A balanced AVL tree_

An AVL tree stores in each node the height of the subtrees rooted at this node. Then, for any node, we can check if it is heigh balanced: that the height of the left subtree and the height of the right subtree differ by no more than one. AVL trees implement the standard Dictionary data type methods - fetch, insert, delete split, and join. Each has O(log(n)) run time.

For each node _i_, _i_.balance measures the relative hegihts of its left and right subtrees; _i_.balance is the height of _i_'s left subtree minus the height of _i_'s right subtree. Balance must be greater than or equal to -1 and less than or equal to 1.

When you **insert** a node (in standard BST way, plus set new node balance to 0), the balance of some nodes might change to -2 or 2. Therefore, when we "unwind" the recursive stack, we check and fix the balance at each node through a series of roations (can be either left or right).

<img src="https://s3.amazonaws.com/hr-challenge-images/0/1436854305-b167cc766c-AVL_Tree_Rebalancing.svg.png" width="400"/>

```java
// Java program for insertion in AVL Tree
class Node {
    int key, height;
    Node left, right;
 
    Node(int d) {
        key = d;
        height = 1;
    }
}
 
class AVLTree {
 
    Node root;
 
    // A utility function to get height of the tree
    int height(Node N) {
        if (N == null)
            return 0;
 
        return N.height;
    }
 
    // A utility function to get maximum of two integers
    int max(int a, int b) {
        return (a > b) ? a : b;
    }
 
    // A utility function to right rotate subtree rooted with y
    // See the diagram given above.
    Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;
 
        // Perform rotation
        x.right = y;
        y.left = T2;
 
        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;
 
        // Return new root
        return x;
    }
 
    // A utility function to left rotate subtree rooted with x
    // See the diagram given above.
    Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;
 
        // Perform rotation
        y.left = x;
        x.right = T2;
 
        //  Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;
 
        // Return new root
        return y;
    }
 
    // Get Balance factor of node N
    int getBalance(Node N) {
        if (N == null)
            return 0;
 
        return height(N.left) - height(N.right);
    }
 
    Node insert(Node node, int key) {
 
        /* 1.  Perform the normal BST insertion */
        if (node == null)
            return (new Node(key));
 
        if (key < node.key)
            node.left = insert(node.left, key);
        else if (key > node.key)
            node.right = insert(node.right, key);
        else // Duplicate keys not allowed
            return node;
 
        /* 2. Update height of this ancestor node */
        node.height = 1 + max(height(node.left),
                              height(node.right));
 
        /* 3. Get the balance factor of this ancestor
              node to check whether this node became
              unbalanced */
        int balance = getBalance(node);
 
        // If this node becomes unbalanced, then there
        // are 4 cases Left Left Case
        if (balance > 1 && key < node.left.key)
            return rightRotate(node);
 
        // Right Right Case
        if (balance < -1 && key > node.right.key)
            return leftRotate(node);
 
        // Left Right Case
        if (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }
 
        // Right Left Case
        if (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }
 
        /* return the (unchanged) node pointer */
        return node;
    }
 
    // A utility function to print preorder traversal
    // of the tree.
    // The function also prints height of every node
    void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }

    /* Given a non-empty binary search tree, return the
       node with minimum key value found in that tree.
       Note that the entire tree does not need to be
       searched. */
    Node minValueNode(Node node)
    {
        Node current = node;
 
        /* loop down to find the leftmost leaf */
        while (current.left != null)
           current = current.left;
 
        return current;
    }
 
    Node deleteNode(Node root, int key)
    {
        // STEP 1: PERFORM STANDARD BST DELETE
        if (root == null)
            return root;
 
        // If the key to be deleted is smaller than
        // the root's key, then it lies in left subtree
        if (key < root.key)
            root.left = deleteNode(root.left, key);
 
        // If the key to be deleted is greater than the
        // root's key, then it lies in right subtree
        else if (key > root.key)
            root.right = deleteNode(root.right, key);
 
        // if key is same as root's key, then this is the node
        // to be deleted
        else
        {
            // node with only one child or no child
            if ((root.left == null) || (root.right == null))
            {
                Node temp = null;
                if (temp == root.left)
                    temp = root.right;
                else
                    temp = root.left;
 
                // No child case
                if (temp == null)
                {
                    temp = root;
                    root = null;
                }
                else   // One child case
                    root = temp; // Copy the contents of
                                 // the non-empty child
            }
            else
            {
                // node with two children: Get the inorder
                // successor (smallest in the right subtree)
                Node temp = minValueNode(root.right);
 
                // Copy the inorder successor's data to this node
                root.key = temp.key;
 
                // Delete the inorder successor
                root.right = deleteNode(root.right, temp.key);
            }
        }
 
        // If the tree had only one node then return
        if (root == null)
            return root;
 
        // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
        root.height = max(height(root.left), height(root.right)) + 1;
 
        // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to check whether
        //  this node became unbalanced)
        int balance = getBalance(root);
 
        // If this node becomes unbalanced, then there are 4 cases
        // Left Left Case
        if (balance > 1 && getBalance(root.left) >= 0)
            return rightRotate(root);
 
        // Left Right Case
        if (balance > 1 && getBalance(root.left) < 0)
        {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }
 
        // Right Right Case
        if (balance < -1 && getBalance(root.right) <= 0)
            return leftRotate(root);
 
        // Right Left Case
        if (balance < -1 && getBalance(root.right) > 0)
        {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }
 
        return root;
    }
 
    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
 
        /* Constructing tree given in the above figure */
        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 20);
        tree.root = tree.insert(tree.root, 30);
        tree.root = tree.insert(tree.root, 40);
        tree.root = tree.insert(tree.root, 50);
        tree.root = tree.insert(tree.root, 25);
 
        /* The constructed AVL Tree would be
             30
            /  \
          20   40
         /  \     \
        10  25    50
        */
        System.out.println("Preorder traversal" +
                        " of constructed tree is : ");
        tree.preOrder(tree.root);

        tree.root = tree.deleteNode(tree.root, 10);
 
        /* The AVL Tree after deletion of 10
           1
          /  \
         0    9
        /     / \
        -1    5   11
        /  \
        2    6
         */
        System.out.println("");
        System.out.println("Preorder traversal after "+
                           "deletion of 10 :");
        tree.preOrder(tree.root);
    }
}
```










