# Breadth First Search (BFS)

#### Algorithm that traverses graph or tree data strucutres. Starting at a given node, explores all immediately neighboring nodes before moving to next level neighbors.

Implement with iterative algorithm, need some sort of is-visited flag. Use queue, s.t.: {root, child-a, child-b, grandchild-a1, grandchild-a2, grandchild-b1, etc.}.

## Example Implementation(s)
```java
public void bfs(int[][] adjacency_matrix, Node node){
	Queue queue = new LinkedList();
	queue.add(node);
	node.visited = true;
	while(!queue.isEmpty){
		Node e = queue.remove();
		System.out.println(e.data + " ");
		Arraylist<Node> neighbors = findNeighbors(adjacency_matrix, e);
		for(Node n : neighbors){
			if(n != null && !n.visited){
				queue.add(n);
				n.visited = true;
			}

		}
	}
}
```

#  Depth First Search (DFS)

#### Algorithm that traverses graph or tree data structure. Starting at a given node, it explores as far as possible along each branch before backtracking.

Problem: can miss simple solutions, traversing lots of extra nodes before finding it. 
Implement with iterative algorithm, use stack, s.t.: {grandchild-a1, grandchild-a2, ~~child-a,~~ child-b }.

## Example Implementation(s)
```java
public void dfsUsingStack(int[][] adjacency_matrix, Node node){
	Stack stack = new Stack();
	stack.add(node);
	node.visited = true;
	while(!stack.isEmpty){
		Node e = stack.remove();
		System.out.println(e.data + " ");
		Arraylist<Node> neighbors = findNeighbors(adjacency_matrix, e);
		for(Node n : neighbors){
			if(n != null && !n.visited){
				stack.add(n);
				n.visited = true;
			}
		}
	}
}

public void dfsRecursive(int[][] adjacency_matrix, Node node){
	System.out.println(node.data + " ");
	Arraylist<Node> neighbors = findNeighbors(adjacency_matrix, node);
	for(Node n : neighbors){
		if(n != null && !n.visited){
			dfsRecursive(adjacency_matrix, n);
			n.visited = true;
		}
	}

}
```

# Computational Complexity and Trade Offs
**Space Complexity:**
BFS - O(b^d) [branching factor raised to the depth]
DFS - O(|V|) [longest possible path]

**Time Complexity:**
O(b^d) [since they may need to search the whole tree]

**Trade Offs**
BFS uses more memory (depending on branching factor), but will give optimal solution if you are searching for something at the lowest depth possible. Extra space is O(w), where w is maximum width of the tree.

DFS is better about space but may find suboptimal solution (meaning it will stop before finding the real shortest path). Extra space is determined by maximum height for trees O(h) or O(|V|) the longest possible path of a graph.
